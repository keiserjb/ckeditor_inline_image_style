<?php

/**
 * Implements hook_filter_info().
 */
function ckeditor_inline_image_style_filter_info() {
  $filters = [];
  $filters['ckeditor_inline_image_style'] = [
    'title' => t('Make images support image styles'),
    'description' => t('Replace img tags with markup that contains the selected image style.'),
    'process callback' => 'ckeditor_inline_image_style_filter_process',
    'settings callback' => 'ckeditor_inline_image_style_filter_settings',
    'default settings' => [
      'image_styles' => [],
    ],
  ];
  return $filters;
}

/**
 * Filter settings callback for CKEditor inline image style filter.
 */
function ckeditor_inline_image_style_filter_settings($form, &$form_state, $filter, $format, $defaults = []) {
  $settings = [];
  $image_styles = image_styles();
  $options = ['none' => t('Original Image')];

  foreach ($image_styles as $machine_name => $info) {
    $options[$machine_name] = $info['label'];
  }

  $settings['image_styles'] = [
    '#type' => 'checkboxes',
    '#title' => t('Select the image styles that are available inside CKEditor'),
    '#default_value' => isset($filter->settings['image_styles']) ? $filter->settings['image_styles'] : $defaults['image_styles'],
    '#options' => $options,
    '#description' => t('Choose the image styles that will be available for selection in CKEditor.'),
  ];

  return $settings;
}

/**
 * Process callback for inline image filter.
 */
function ckeditor_inline_image_style_filter_process($text) {
  preg_match_all('/<img [^>]*data-image-style\s*=\s*["\'][^>]*>/i', $text, $images);
  if (!empty($images[0])) {
    foreach ($images[0] as $image) {
      $image_render_array = ckeditor_inline_image_style_filter_prepare_image($image);
      if (!$image_render_array) {
        continue;
      }
      $styled_image_url = $image_render_array['#path'];
      $styled_width = $image_render_array['#width'];
      $styled_height = $image_render_array['#height'];
      $image_style = $image_render_array['#style_name'];

      $new_image = preg_replace('/src="[^"]*"/i', 'src="' . check_plain($styled_image_url) . '"', $image);
      $new_image = preg_replace('/width="[^"]*"/i', 'width="' . $styled_width . '"', $new_image);
      $new_image = preg_replace('/height="[^"]*"/i', 'height="' . $styled_height . '"', $new_image);

      // Ensure data-image-style attribute is present
      if (!preg_match('/data-image-style\s*=\s*["\'][^"\']*["\']/', $new_image)) {
        $new_image = preg_replace('/<img /i', '<img data-image-style="' . check_plain($image_style) . '" ', $new_image);
      } else {
        $new_image = preg_replace('/data-image-style\s*=\s*["\'][^"\']*["\']/', 'data-image-style="' . check_plain($image_style) . '"', $new_image);
      }

      $text = str_replace($image, $new_image, $text);
    }
  }
  return $text;
}


/**
 * Prepares an image.
 */
function ckeditor_inline_image_style_filter_prepare_image($image) {
  $image = str_replace('/>', '>', $image);
  $image = str_replace('>', ' />', $image);
  $image = str_replace("&nbsp;", '', $image);
  $image = htmlspecialchars($image);
  $xml = simplexml_load_string('<image>' . html_entity_decode($image, ENT_QUOTES, "utf-8") . '</image>');

  if (isset($xml->img[0]) && is_object($xml->img[0])) {
    $attributes = [];
    foreach ($xml->img[0]->attributes() as $a => $b) {
      $attributes[$a] = (string) $b;
    }
  }

  $image_style = FALSE;
  if (isset($attributes['data-image-style'])) {
    $image_style = $attributes['data-image-style'];
  }
  if (!$image_style) {
    return FALSE;
  }

  $image_styles = image_styles();
  if (!isset($image_styles[$image_style])) {
    return FALSE;
  }
  if (!isset($attributes['src'])) {
    return FALSE;
  }

  $src = $attributes['src'];
  unset($attributes['src']);
  $alt = isset($attributes['alt']) ? $attributes['alt'] : '';
  unset($attributes['alt']);
  $title = isset($attributes['title']) ? $attributes['title'] : '';
  unset($attributes['title']);
  if (!empty($attributes['class']) && !is_array($attributes['class'])) {
    $attributes['class'] = array_filter(explode(' ', $attributes['class']));
  }

  $uri = ckeditor_inline_image_style_image_uri($src);
  if (!$uri) {
    return FALSE;
  }
  $file = _ckeditor_inline_image_style_file_load_by_uri($uri);
  if (!$file) {
    return FALSE;
  }
  $image_info = image_get_info($uri);
  if (!$image_info) {
    return FALSE;
  }

  if ($image_style != 'none') {
    $styled_image_url = image_style_url($image_style, $uri);
  } else {
    $styled_image_url = file_create_url($uri);
  }

  if ($image_style != 'none' && !empty($image_styles[$image_style]['effects'])) {
    $effect = reset($image_styles[$image_style]['effects']);
    if (isset($effect['data']['width']) && isset($effect['data']['height'])) {
      $styled_width = $effect['data']['width'];
      $styled_height = $effect['data']['height'];
    }
  } else {
    $styled_image_url = file_create_url($uri);
    $styled_width = $image_info['width'];
    $styled_height = $image_info['height'];
  }

  if (!isset($styled_width) || !isset($styled_height)) {
    return FALSE;
  }

  if (!isset($styled_image_url)) {
    $styled_image_url = image_style_url($image_style, $uri);
  }
  $image_render_array = [
    '#theme'      => 'image_style',
    '#style_name' => $image_style,
    '#path'       => $styled_image_url,
    '#width'      => $styled_width,
    '#height'     => $styled_height,
    '#alt'        => $alt,
    '#title'      => $title,
    '#attributes' => ['data-image-style' => $image_style] + $attributes,
  ];
  return $image_render_array;
}

/**
 * Helper function to load a file by URI.
 */
function _ckeditor_inline_image_style_file_load_by_uri($uri) {
  $files = file_load_multiple([], ['uri' => $uri]);
  return reset($files);
}

/**
 * Helper function to figure out the uri of an image source.
 *
 * @param string $src
 *   Image src starting with http://, https://, or root relative /.
 */
function ckeditor_inline_image_style_image_uri($src) {
  global $base_path;

  $visible_stream_wrappers = array_intersect_key(
    file_get_stream_wrappers(STREAM_WRAPPERS_WRITE),
    file_get_stream_wrappers(STREAM_WRAPPERS_VISIBLE)
  );

  if (preg_match('/https:\/\/[a-zA-Z0-9\-]+\.s3\.[a-zA-Z0-9\-]+\.amazonaws\.com\/(.+)/', $src, $matches)) {
    $path = $matches[1];
    $uri = "s3://{$path}";
    return $uri;
  }

  $uri = '';
  $src = parse_url($src, PHP_URL_PATH);
  $src = trim($src, '/');
  $needles = [];
  $matches = [];
  foreach ($visible_stream_wrappers as $scheme => $data) {
    $class = file_stream_wrapper_get_class($scheme);
    $stream_wrapper = new $class();
    if (method_exists($stream_wrapper, 'getDirectoryPath')) {
      $needles[$scheme] = trim($base_path . $stream_wrapper->getDirectoryPath(), '/');
      if (!empty($needles[$scheme]) && strpos($src, $needles[$scheme]) === 0) {
        $uri = $scheme . '://' . substr($src, strlen($needles[$scheme]) + 1);
        return $uri;
      }
    }
  }
  return FALSE;
}

/**
 * Implements hook_node_insert().
 */
function ckeditor_inline_image_style_node_insert($node) {
  ckeditor_inline_image_style_handle_file_usage($node);
}

/**
 * Implements hook_node_update().
 */
function ckeditor_inline_image_style_node_update($node) {
  ckeditor_inline_image_style_handle_file_usage($node, TRUE);
}

/**
 * Handle file usage for the node.
 *
 * @param object $node
 *   The node object.
 * @param bool $is_update
 *   Whether this is an update operation.
 */
function ckeditor_inline_image_style_handle_file_usage($node, $is_update) {
  // Get the current referenced files.
  $current_referenced_files = [];
  if (isset($node->body[LANGUAGE_NONE][0]['value'])) {
    $text = $node->body[LANGUAGE_NONE][0]['value'];
    $current_referenced_files = ckeditor_inline_image_style_find_referenced_files($text);
  }

  // If this is an update, compare to the original files.
  if ($is_update) {
    $original_referenced_files = ckeditor_inline_image_style_find_referenced_files($node->original->body[LANGUAGE_NONE][0]['value']);
    $removed_files = array_diff($original_referenced_files, $current_referenced_files);
    ckeditor_inline_image_style_delete_file_usage($removed_files, $node);
  }

  // Always add current files as permanent and track their usage.
  foreach ($current_referenced_files as $file_id) {
    $file = file_load($file_id);
    if ($file) {
      if ($file->status != FILE_STATUS_PERMANENT) {
        $file->status = FILE_STATUS_PERMANENT;
        file_save($file);
      }
      if (!ckeditor_inline_image_style_file_usage_exists($file, $node)) {
        file_usage_add($file, 'ckeditor_inline_image_style', 'node', $node->nid);
      }
    }
  }
}

/**
 * Find referenced files in the processed text.
 *
 * @param string $text
 *   The text to search for referenced files.
 *
 * @return array
 *   An array of file IDs.
 */
function ckeditor_inline_image_style_find_referenced_files($text) {
  $file_ids = [];

  // Match all img tags and extract the src attribute.
  preg_match_all('/<img [^>]*src=["\']([^"\']+)["\'][^>]*>/i', $text, $matches);

  if (!empty($matches[1])) {
    foreach ($matches[1] as $src) {
      $uri = ckeditor_inline_image_style_image_uri($src);
      if ($uri) {
        $file = _ckeditor_inline_image_style_file_load_by_uri($uri);
        if ($file) {
          $file_ids[] = $file->fid;
        }
      }
    }
  }
  return $file_ids;
}

/**
 * Check if a file usage record already exists.
 *
 * @param object $file
 *   The file object.
 * @param object $entity
 *   The node entity.
 *
 * @return bool
 *   TRUE if the file usage record exists, FALSE otherwise.
 */
function ckeditor_inline_image_style_file_usage_exists($file, $entity) {
  $query = db_select('file_usage', 'fu')
    ->fields('fu', ['fid'])
    ->condition('fid', $file->fid)
    ->condition('type', 'node')
    ->condition('id', $entity->nid)
    ->execute();
  return (bool) $query->fetchField();
}


/**
 * Deletes file usage of files no longer referenced by the node.
 *
 * @param array $fids
 *   An array of file entity IDs.
 * @param object $entity
 *   An entity whose fields to inspect for file references.
 */
function ckeditor_inline_image_style_delete_file_usage(array $fids, $entity) {
  foreach ($fids as $fid) {
    if ($file = file_load($fid)) {
      file_usage_delete($file, 'ckeditor_inline_image_style', 'node', $entity->nid);
    }
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter() for node edit forms.
 */
function ckeditor_inline_image_style_form_node_form_alter(&$form, &$form_state, $form_id) {
  if (strpos($form_id, 'node_form') !== FALSE) {
    backdrop_add_css(ckeditor_inline_image_style_css('.ImagePreviewBox'), 'inline');

    $image_styles = image_styles();
    $mappings = [];

    foreach ($image_styles as $machine_name => $info) {
      $mappings[$machine_name] = $info['label'];
    }

    $mappings = ['none' => 'Original Image'] + $mappings;
    $generic_label = t('All Image Styles');

    backdrop_add_js([
      'ckeditor_inline_image_style' => [
        'mappings'  => $mappings,
        'label'     => $generic_label,
        'editorCSS' => ckeditor_inline_image_style_css(),
      ],
    ], 'setting');

    $path_to_css = backdrop_get_path('module', 'ckeditor_inline_image_style') . '/css/ckeditor5.css';
    backdrop_add_css($path_to_css);
  }
}

/**
 * Implements hook_form_FORM_ID_alter() for CKEditor image dialog form.
 */
function ckeditor_inline_image_style_form_filter_format_editor_image_form_alter(&$form, &$form_state) {
  $format = $form_state['format'];

  if ($format->editor !== 'ckeditor' && $format->editor !== 'ckeditor5') {
    return;
  }

  $filter_enabled = !empty($format->filters['ckeditor_inline_image_style']->status);
  $values = isset($_SESSION['inline_image_styles_last_attributes']) ? $_SESSION['inline_image_styles_last_attributes'] : [];

  if (isset($form_state['input']['editor_object'])) {
    $values = $form_state['input']['editor_object'];
  }

  $image_styles = image_styles();
  $ckeditor_mappings = array_filter($format->filters['ckeditor_inline_image_style']->settings['image_styles']);
  $options = ['none' => t('Original Image')];

  foreach ($ckeditor_mappings as $machine_name) {
    if (isset($image_styles[$machine_name])) {
      $label = $image_styles[$machine_name]['label'];
      $options[$machine_name] = $label;
    }
  }

  $form['attributes']['data-image-style'] = [
    '#title' => t('Image Style'),
    '#type' => 'select',
    '#default_value' => isset($values['data-image-style']) ? $values['data-image-style'] : 'none',
    '#options' => $options,
    '#wrapper_attributes' => ['class' => ['editor-data-image-style']],
    '#parents' => ['attributes', 'data-image-style'],
    '#description' => t('Choose the image style you want to apply.'),
    '#access' => $filter_enabled,
  ];

  $form['actions']['submit']['#ajax']['callback'] = 'ckeditor_inline_image_style_format_editor_dialog_save';
}

/**
 * Custom save function for the image dialog form.
 */
function ckeditor_inline_image_style_format_editor_dialog_save($form, &$form_state) {
  $return = filter_format_editor_dialog_save($form, $form_state);

  if (isset($form_state['values']['attributes']['data-image-style'])) {
    $style_name = $form_state['values']['attributes']['data-image-style'];
    foreach ($return['#commands'] as &$command) {
      if ($command['command'] === 'editorDialogSave') {
        $command['values']['attributes']['data-image-style'] = $style_name;
        break;
      }
    }
    $_SESSION['inline_image_styles_last_attributes']['data-image-style'] = $style_name;
  }

  // Ensure data-image-style is set if it's in the form state.
  if (isset($form_state['values']['attributes']) && !isset($form_state['values']['attributes']['data-image-style'])) {
    $form_state['values']['attributes']['data-image-style'] = isset($_SESSION['inline_image_styles_last_attributes']['data-image-style']) ? $_SESSION['inline_image_styles_last_attributes']['data-image-style'] : 'none';
  }
  return $return;
}

/**
 * Implements hook_permission().
 */
function ckeditor_inline_image_style_permission() {
  return [
    'administer ckeditor inline image style settings' => [
      'title' => t('Administer CKEditor inline image style settings'),
      'description' => t('Manage settings for the CKEditor inline image style module.'),
    ],
  ];
}

/**
 * Implements hook_ckeditor_plugins_alter().
 */
function ckeditor_inline_image_style_ckeditor_plugins_alter(&$plugins) {
  $path = backdrop_get_path('module', 'ckeditor_inline_image_style');
  $image_prefix = backdrop_get_path('module', 'ckeditor') . '/images/buttons/';

  $plugins['backdropimage'] = [
    'path' => $path . '/ckeditor/plugins/backdropimage',
    'file' => 'plugin.js',
    'css' => [$path . '/css/ckeditor.css'],
    'buttons' => [
      'BackdropImage' => [
        'label' => t('Image'),
        'required_html' => [
          ['tags' => ['img'], 'attributes' => ['src', 'alt', 'data-file-id', 'data-align']],
        ],
        'image' => $image_prefix . 'image.png',
      ],
    ],
  ];

  $plugins['backdropimagecaption'] = [
    'path' => $path . '/ckeditor/plugins/backdropimagecaption',
    'file' => 'plugin.js',
    'css' => [$path . '/css/ckeditor.css'],
    'enabled callback' => 'ckeditor_image_plugin_check',
    'required_html' => [
      ['tags' => ['img'], 'attributes' => ['data-caption']],
      ['tags' => ['figure', 'figcaption'], 'attributes' => ['src', 'alt', 'class', 'data-placeholder']],
    ],
  ];
}

/**
 * Implements hook_preprocess_HOOK() for page templates.
 */
function ckeditor_inline_image_style_preprocess_page(&$variables) {
  backdrop_add_library('ckeditor_inline_image_style', 'ckeditor_inline_image_style');
}


/**
 * Implements hook_library_info().
 */
function ckeditor_inline_image_style_library_info() {
  $module_path = backdrop_get_path('module', 'ckeditor_inline_image_style');
  return array(
    'ckeditor_inline_image_style' => array(
      'version' => '1.0',
      'js' => array(
        $module_path . '/js/ckeditor_inline_image_style.js' => array(),
      ),
      'dependencies' => array(
        array('system', 'jquery'),
      ),
    ),
  );
}



/**
 * Implements hook_library_info_alter().
 */
function ckeditor_inline_image_style_library_info_alter(&$libraries, $module) {
  $module_path = backdrop_get_path('module', 'ckeditor5');
  if ($module == 'ckeditor5' && isset($libraries['backdrop.ckeditor5.backdrop-image'])) {
    $path = backdrop_get_path('module', 'ckeditor_inline_image_style') . '/ckeditor5/plugins/backdrop-image/backdrop-image.js';
    $libraries['backdrop.ckeditor5.backdrop-image']['js'][$path] = ['group' => JS_LIBRARY, 'weight' => 5];
  }
}

/**
 * Implements hook_ckeditor5_plugins_alter().
 */
function ckeditor_inline_image_style_ckeditor5_plugins_alter(array &$plugins) {
  $image_prefix = backdrop_get_path('module', 'ckeditor5') . '/icons/';
  $plugins['backdropImage.BackdropImage'] = [
    'library' => ['ckeditor5', 'backdrop.ckeditor5.backdrop-image'],
    'buttons' => [
      'backdropImage' => [
        'label'               => t('Image'),
        'plugin_dependencies' => [
          'image.Image',
          'image.ImageToolbar',
          'image.ImageInsertUI',
          'image.ImageUpload',
          'image.ImageResize',
          'image.ImageCaptionUtils',
        ],
        'required_html'       => [
          '<img src alt height width data-file-id data-image-style>',
        ],
        'image'               => $image_prefix . '/image.svg',
      ],
    ],
    'config'  => [
      'image' => [
        'toolbar' => [
          'imageTextAlternative',
          'editBackdropImage',
        ],
        'upload' => [
          'type' => image_get_supported_extensions(),
        ],
        'resizeUnit' => 'px',
      ],
      'backdropImage' => [
        'editLabel' => t('Edit Image'),
        'insertLabel' => t('Insert Image'),
        'extraAttributes' => [
          'dataFileId' => 'data-file-id',
          'alt'        => 'alt',
          'src'        => 'src',
          'width'      => 'width',
          'height'     => 'height',
        ],
      ],
    ],
  ];
}

/**
 * Generate CSS to handle more realistic display of image styles.
 */
function ckeditor_inline_image_style_css($prefix = '') {
  $image_styles = image_styles();
  $ckeditor_mappings = [];

  $formats = filter_formats();
  foreach ($formats as $format) {
    if (isset($format->filters['ckeditor_inline_image_style']) && $format->filters['ckeditor_inline_image_style']->status) {
      $ckeditor_mappings = array_merge($ckeditor_mappings, $format->filters['ckeditor_inline_image_style']->settings['image_styles']);
    }
  }

  $ckeditor_mappings = array_filter($ckeditor_mappings); // Remove any empty values
  $mappings = [];

  foreach ($ckeditor_mappings as $machine_name) {
    if (array_key_exists($machine_name, $image_styles) && !empty($image_styles[$machine_name]['effects'])) {
      $effect = reset($image_styles[$machine_name]['effects']);
      if (isset($effect['data']['width']) && isset($effect['data']['height'])) {
        $dimensions = [
          'width' => $effect['data']['width'],
          'height' => $effect['data']['height'],
        ];
        $dimensions['width'] .= 'px';
        $dimensions['height'] .= 'px';
        $mappings[$machine_name] = $prefix . ' img[data-image-style="' . $machine_name . '"] {';
        $mappings[$machine_name] .= ' width: ' . $dimensions['width'] . ';';
        $mappings[$machine_name] .= ' height: ' . $dimensions['height'] . ';';
        $mappings[$machine_name] .= '}';
      }
    }
  }
  return implode("\n", $mappings);
}

